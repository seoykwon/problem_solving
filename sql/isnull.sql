-- FOOD_WAREHOUSE 테이블에서 경기도에 위치한 창고의 ID, 이름, 주소, 냉동시설 여부를 조회하는 SQL문을 작성해주세요. 
-- 이때 냉동시설 여부가 NULL인 경우, 'N'으로 출력시켜 주시고 결과는 창고 ID를 기준으로 오름차순 정렬해주세요.
SELECT WAREHOUSE_ID, WAREHOUSE_NAME, ADDRESS, IFNULL(FREEZER_YN, 'N') AS FREEZER_YN
FROM FOOD_WAREHOUSE
WHERE ADDRESS LIKE '경기도%'
ORDER BY WAREHOUSE_ID ASC

CASE WHEN
    FREEZER_YN IS NULL THEN 'N'
    ELSE FREEZER_YN END FREEZER_YN

-- 동물 보호소에 들어온 동물 중, 이름이 없는 채로 들어온 동물의 ID를 조회하는 SQL 문을 작성해주세요. 단, ID는 오름차순 정렬되어야 합니다.
SELECT ANIMAL_ID
FROM ANIMAL_INS
WHERE NAME IS NULL
ORDER BY 1

SELECT ANIMAL_ID 
FROM ANIMAL_INS
WHERE NAME IS NOT NULL
ORDER BY 1

SELECT ANIMAL_TYPE, IFNULL(NAME, "No name"), SEX_UPON_INTAKE
FROM ANIMAL_INS

SELECT ANIMAL_TYPE, 
CASE WHEN NAME IS NULL THEN 'No name' ELSE NAME END NAME, SEX_UPON_INTAKE
FROM ANIMAL_INS

SELECT COUNT(*) AS USERS
FROM USER_INFO
WHERE AGE IS NULL

-- ROOT 아이템을 찾아 아이템 ID(ITEM_ID), 아이템 명(ITEM_NAME)을 출력하는 SQL문을 작성해 주세요. 
-- 이때, 결과는 아이템 ID를 기준으로 오름차순 정렬해 주세요.
SELECT A.ITEM_ID, A.ITEM_NAME
FROM ITEM_INFO AS A
NATURAL JOIN ITEM_TREE AS B
WHERE B.PARENT_ITEM_ID IS NULL
ORDER BY A.ITEM_ID ASC;

-- 더 이상 업그레이드할 수 없는 아이템의 아이템 ID(ITEM_ID), 아이템 명(ITEM_NAME), 
-- 아이템의 희귀도(RARITY)를 출력하는 SQL 문을 작성해 주세요. 
-- 이때 결과는 아이템 ID를 기준으로 내림차순 정렬해 주세요.
SELECT I.ITEM_ID, I.ITEM_NAME, I.RARITY
-- SELECT *
FROM ITEM_INFO I
    LEFT JOIN ITEM_TREE T
    ON I.ITEM_ID = T.PARENT_ITEM_ID
WHERE T.PARENT_ITEM_ID IS NULL
ORDER BY 1 DESC

-- 잡은 물고기의 평균 길이를 출력하는 SQL문을 작성해주세요.
-- 평균 길이를 나타내는 컬럼 명은 AVERAGE_LENGTH로 해주세요.
-- 평균 길이는 소수점 3째자리에서 반올림하며, 10cm 이하의 물고기들은 10cm 로 취급하여 평균 길이를 구해주세요.
SELECT ROUND(AVG(IFNULL(LENGTH, 10)), 2) AS AVERAGELENGTH
FROM FISHINFO

select ROUND(avg(
    CASE 
        WHEN LENGTH IS NULL THEN 10
        WHEN LENGTH <= 10 THEN 10
        ELSE LENGTH
    END), 2) as AVERAGE_LENGTH
from FISH_INFO